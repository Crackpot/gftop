#!/usr/bin/env python
#coding=utf-8

print "定义序列"
t=("a", "b", "mpilgrim", "z", "example")    #序列的定义同列表的定义方式相同，除了整个元素集是用小括号包围的而不是方括号。
print "序列为：", t
print "序列中下标为0的元素t[0]为：", t[0]      #序列的元素象列表一样按定义的次序进行排序。序列的索引象列表一样从0开始，所以一个非空序列的第一个元素总是 t[0]。
print "序列中下标为-1的元素（即最后一个元素）t[－1]为：", t[-1]      #负数索引象列表一样从序列尾部开始计数。
print "序列中下标1与3之间的元素t[1:3]为：", t[1:3]   #分片也可以使用，就象列表一样。注意当分割一个列表时，会得到一个新的列表；当分割一个序列时，会得到一个新的序列。

print "序列没有方法:"
print "序列t为：", t
#t.append("new")         不能向序列增加元素。序列没有 append 或 extend 方法。
#t.remove("z")              不能从序列中除掉元素。序列没有 remove 或 pop 方法。
#t.index("example")     不能在序列中查找元素。序列没有 index 方法。
print "通过(\"z\" in t) 操作判断元素\"z\"是否在序列t中","z" in t  #可以使用 in 来看一看是否一个元素存在于序列中。
"""
序列的好处：

    * 序列比列表操作速度快。如果你定义了一个值集合常量，并且唯一要用它做的是不断地遍历它，使用序列代替列表。
    * 字典关键字可以是整数，字符串和“几种其它的类型”，序列就是那些类型之一。序列可以在字典中被用作关键字，但是列表不行。
    * 序列用在字符串格式化，这一点我们会很快看到。

Note
序列可以转化成列表，反之亦然。内置的 tuple 函数接收一个列表，返回一个有着相同元素的序列。而 list 函数接收一个序列，返回一个列表。从效果上看，tuple 冻结一个列表，而 list 解冻一个序列。
"""
print "列表与序列的相互转换："
li=[1, 2, 3]
print "列表li为：", li
t=tuple(li)
print "通过t=tuple(li)操作所得的序列t为", t
t=(1, 2, 3)
print "对序列t重新赋值，为：", t
print "通过 tuple(t)对序列本身的序列化", tuple(t)
print "创建一个变量，赋字符串给它，s=\"crackpot\"" 
s="crackpot"
t=tuple(s)
print "通过t=tuple(s)，将字符串s转换为序列t:\t", t
import array    #导入数组模块
t=tuple(array.array('i', range(10)))
print t
