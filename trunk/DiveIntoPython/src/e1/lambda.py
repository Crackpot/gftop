#!/usr/bin/env python
#coding=utf-8

#Python支持一种有趣的语法，它允许你快速定义单行的最小函数。这些叫做 lambda 的函数是从Lisp中借用来的，可以被用在任何需要函数的地方。出于历史的原因，lambda 函数的语法与通常的函数有些细微的不同。
def f(x):   #这是一个通常的函数声明，尽管以前你可能没有看到过定义在交互式窗口中的函数。这个 ... 说明它是一个多行的交互语句。只要在第一行的后面敲入回车，Python IDE会让你接着输入命令。
    return x*2

print f(3)


g=lambda x:x*2  #这是一个 lambda 函数，它完成同上面普通函数相同的事情。注意这里的简短的语法；没有小括号， return 是默认的，并且函数没有名字，只有将它赋值给变量的变量名。
print g(3)

print (lambda x:x*2)(3) #你甚至可以不将 lambda 函数赋值给一个变量而使用它。这不是举世无双的东西，它只是展示了 lambda 函数只是一个内联函数。

#lambda 函数是一个可以接收任意多个参数(包括可选参数)并且返回单个表达式值的函数。 lambda 函数不能包含命令，它们所包含的表达式不能超过一个。不要试图向 lambda 函数中塞入太多的东西；如果你需要更复杂的东西，应该定义一个普通函数，然后想让它多长就多长。

#lambda 函数是风格问题。不一定非要使用它们，任何能够使用它们的地方，都可以定义一个分离的普通的函数，用它来替换。我将它们用在需要封装特殊的，非重用的代码上，用许多小的一行函数不会弄乱我的代码。